[project]
name = "ARLBench"
version = "0.1.3"
dependencies = [
  "typing_extensions", # Better typing
  "numpy==1.26.4",
  "tomli==2.0.1", 
  "pre-commit==3.7.0", 
  "codecarbon==2.3.5",
  "memray==1.12.0",
  "pathos==0.3.2",
  "jax==0.4.26",
  "jaxlib==0.4.26",
  "flashbax==0.1.2",
  "gymnax==0.0.6",
  "chex==0.1.86",
  "ConfigSpace==1.2.1",
  "distrax==0.1.5",
  "flax==0.8.2",
  "brax==0.10.3",
  "pytest==7.4.4",
  "coverage==7.4.4",
  "chex==0.1.86",
  "xminigrid==0.8.0",
  "ruff",
  "hydra-core",
  "hydra-submitit-launcher",
  "hydra_colorlog",
  "mypy",
  "tox",
  "twine",
  "bump-my-version",
  
]

requires-python = ">=3.10"
authors = [{ name = "AutoML Hannover", email =  "automl@ai.uni-hannover.de" }]
readme = "README.md"
description = "Python Boilerplate that contains all the code you need to create a Python package."
classifiers = [
  'Intended Audience :: Science/Research',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: BSD License',
  'Programming Language :: Python',
  'Topic :: Software Development',
  'Topic :: Scientific/Engineering',
  'Operating System :: POSIX',
  'Operating System :: Unix',
  'Programming Language :: Python :: 3',
]
license = { file = "LICENSE" }

[project.optional-dependencies]
dev = ["ARLBench[doc, tooling, test, examples]"]
tooling = ["commitizen", "pre-commit", "ruff"]

test = ["pytest", "pytest-coverage", "pytest-cases", "ARLBench[examples]"]
examples = ["hypersweeper"]
doc = [
  "automl_sphinx_theme", "gymnasium==0.29.1"
]
envpool = ["envpool==0.8.4"]


# https://docs.pytest.org/en/7.2.x/reference/reference.html#ini-options-ref
[tool.pytest.ini_options]
testpaths = ["tests"]
minversion = "7.0"
empty_parameter_set_mark = "xfail"
log_cli = false
log_level = "DEBUG"
xfail_strict = true
addopts = "--durations=10 -vv"
markers = ["example: An example"]


[tool.coverage.run]
branch = true
include = ["arlbench"]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
  "pragma: no cover",
  '\.\.\.',
  "raise NotImplementedError",
  "if TYPE_CHECKING",
]

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.2.0"
update_changelog_on_bump = true
version_files = ["pyproject.toml:version"]
changelog_start_rev = "1.0.0"

# https://github.com/charliermarsh/ruff
[tool.ruff]
target-version = "py310"
line-length = 88
show-source = true
src = ["src", "tests", "examples"]
lint.extend-safe-fixes = ["ALL"]

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

lint.select = [
  "A",
  # "ANN", # Handled by mypy
  "ARG",
  "B",
  "BLE",
  "COM",
  "C4",
  "D",
  # "DTZ",  # One day I should know how to utilize timezones and dates...
  "E",
  # "EXE", Meh
  "ERA",
  "F",
  "FBT",
  "I",
  # "ISC",  # Favours implicit string concatenation
  "INP",
  # "INT", # I don't understand this one
  "N",
  "NPY",
  "PD",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "PIE",
  "PT",
  "PTH",
  # "PYI", # Specific to .pyi files for type stubs
  "Q",
  "PGH004",
  "RET",
  "RUF",
  "C90",
  "S",
  # "SLF",    # Private member accessed (sure, it's python)
  "SIM",
  # "TRY", # Good in principle, would take a lot of work to statisfy
  "T10",
  "T20",
  "TID",
  "TCH",
  "UP",
  "N",
  "W",
  "YTT",
]

lint.ignore = [
  "D104",    # Missing docstring in public package
  "D105",    # Missing docstring in magic mthod
  "D203",    # 1 blank line required before class docstring
  "D205",    # 1 blank line between summary and description
  "D401",    # First line of docstring should be in imperative mood
  "N806",    # Variable X in function should be lowercase
  "E731",    # Do not assign a lambda expression, use a def
  "A003",    # Shadowing a builtin
  "S101",    # Use of assert detected.
  "W292",    # No newline at end of file
  "PLC1901", # "" can be simplified to be falsey
  "TCH003",  # Move stdlib import into TYPE_CHECKING
  "B010",    # Do not use `setattr`
  "COM812",
  # These tend to be lighweight and confuse pyright
  "PTH123",
  "PTH109",
  "T201",
  "ERA001",
  "D402",
  "B904",
  "FBT002",
  "FBT001",
  "FBT003",
  "RET505",
  "RET507",
  "B028",
  "B023",
  "D417",
  "E501",
  "PLR0915",
  "PLR0912",
  "C901",
  "PLR2004",
  "S108",
  "PTH118",
  "PTH103",
  "RUF012",
]

exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "docs",
  "*plotting*",
  "*hydra_utils*"
]

# Exclude a variety of commonly ignored directories.
[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
  "S101",
  "D103",
  "ANN001",
  "ANN201",
  "FBT001",
  "D100",
  "PLR2004",
  "PD901",   #  X is a bad variable name. (pandas)
  "TCH",
  "N803"
]

"__init__.py" = ["I002"]
"examples/*" = ["INP001", "I002", "E741", "D101", "D103", "T20", "D415", "ERA001", "E402", "E501"]
"docs/*" = ["INP001"]


[tool.ruff.lint.isort]
known-first-party = ["amltk"]
known-third-party = ["sklearn"]
no-lines-before = ["future"]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true
extra-standard-library = ["typing_extensions"]
force-wrap-aliases = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 10 # Changed from default of 5

[tool.mypy]
python_version = "3.10"
packages = ["arlbench", "tests"]
exclude = ["arlbench/plotting.py"]
show_error_codes = true

warn_unused_configs = true # warn about unused [tool.mypy] lines

follow_imports = "normal"      # Type check top level api code we use from imports
ignore_missing_imports = false # prefer explicit ignores

disallow_untyped_defs = true       # All functions must have types
disallow_untyped_decorators = true # ... even decorators
disallow_incomplete_defs = true    # ...all types

no_implicit_optional = true
check_untyped_defs = true

warn_return_any = true


[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false       # Sometimes we just want to ignore verbose types
disallow_untyped_decorators = false # Test decorators are not properly typed
disallow_incomplete_defs = false    # Sometimes we just want to ignore verbose types
disable_error_code = ["var-annotated"]

[[tool.mypy.overrides]]
module = [
  "sklearn.*",
  "ConfigSpace.*",
  "pandas.*",
  "more_itertools.*",
  "dask_jobqueue.*",
  "wandb.*",
  "threadpoolctl.*",
  "loky.*",
  "metahyper.*",
  "neps.*",
]
ignore_missing_imports = true
[tool.bumpversion]
allow_dirty = false
commit = false
message = "Bump version: {current_version} → {new_version}"
commit_args = ""
tag = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
current_version = "0.1.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = [
    "{major}.{minor}.{patch}"
]
search = "{current_version}"
replace = "{new_version}"

[[tool.bumpversion.files]]
filename = "setup.py"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "Unreleased"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "{current_version}...HEAD"
replace = "{current_version}...{new_version}"

[[tool.bumpversion.files]]
filename = "arlbench/__init__.py"
